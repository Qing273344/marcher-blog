<?xml version="1.0" encoding="UTF-8"?>

<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 -->
<!-- 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志-->

<!-- 属性描述
    scan：设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
    scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 项目名称 -->
    <contextName>marcher-blog</contextName>

    <!-- 定义日志文件 输入位置 -->
    <!--<property name="log_dir" value="/Users/marcher/workapp/marcher/logs/marcher-blog"/>-->
    <property name="log_dir" value="./logs"/>
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="30"/>
    <!-- 日志文件最大存储 -->
    <property name="maxFileSize" value="20MB"/>


    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %logger输出日志的logger名 %msg：日志消息，%n是换行符 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n</pattern>
            <!--解决乱码问题-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender-->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <!-- 过滤器，只记录ERROR级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <!-- 如果没有命中就使用这条规则 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 如果命中就禁止这条日志 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动
             按天来回滚，如果需要按小时来回滚，则设置为{yyyy-MM-dd_HH} -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志输出位置 可相对和绝对路径 -->
            <fileNamePattern>${log_dir}/error.%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6，
            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除-->
            <maxFileSize>${maxFileSize}</maxFileSize>
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>

        <!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
          <!--<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/.log.zip</fileNamePattern>-->
          <!--<minIndex>1</minIndex>-->
          <!--<maxIndex>3</maxIndex>-->
        <!--</rollingPolicy>-->
        <!-- 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 -->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
            <!--<maxFileSize>5MB</maxFileSize>-->
        <!--</triggeringPolicy>-->
        <encoder>
            <pattern>%date [%thread] %-5level [%logger{50}] %file:%line - %msg%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- INFO级别日志 appender -->
    <!--<appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
        <!--&lt;!&ndash; 过滤器，只记录INFO级别的日志 &ndash;&gt;-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">-->
            <!--<level>INFO</level>-->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
            <!--&lt;!&ndash; 按天回滚 daily &ndash;&gt;-->
            <!--<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/info-log.log-->
            <!--</fileNamePattern>-->
            <!--&lt;!&ndash; 日志最大的历史 60天 &ndash;&gt;-->
            <!--<maxHistory>${maxHistory}</maxHistory>-->
        <!--</rollingPolicy>-->
        <!--<encoder>-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>-->
        <!--</encoder>-->
    <!--</appender>-->


    <!-- 为单独的包配置日志级别，若root的级别大于此级别， 此处级别也会输出
       应用场景：生产环境一般不会将日志级别设置为trace或debug，但是为详细的记录SQL语句的情况，
       可将hibernate的级别设置为debug，如此一来，日志文件中就会出现hibernate的debug级别日志，
       而其它包则会按root的级别输出日志
   -->
    <!--<logger name="org.hibernate.SQL" level="DEBUG"/>-->
    <!--<logger name="org.hibernate.jdbc" level="DEBUG"/>-->
    <!--<logger name="org.springframework" level="DEBUG"/>-->


    <!-- 指定一个包，name必填，additivity选填：控制是否继承父类appender，默认true -->
    <!-- level选填，如果木有指定从最近的父类继承，顶级为root的级别 -->
    <logger name="xin.marcher" level="INFO" additivity="false">
        <appender-ref ref="ERROR"/>
    </logger>


    <!-- root级别 DEBUG -->
    <!-- 这里如果是info，spring、mybatis等框架则不会输出：TRACE < DEBUG < INFO <  WARN < ERROR-->
    <!-- root是所有logger的祖先，均继承root，如果某一个自定义的logger没有指定level，就会寻找
    父logger看有没有指定级别，直到找到root。-->
    <root level="INFO">
        <!-- 控制台输出 -->
        <!--<appender-ref ref="STDOUT" />-->
        <!-- 文件输出 -->
        <appender-ref ref="ERROR" />
        <!--<appender-ref ref="INFO" />-->
        <!--<appender-ref ref="WARN" />-->
        <!--<appender-ref ref="DEBUG" />-->
        <!--<appender-ref ref="TRACE" />-->
    </root>
</configuration>